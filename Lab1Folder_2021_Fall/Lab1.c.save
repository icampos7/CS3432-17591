\#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
/* Return true (non-zero) if c is a whitespace characer
   ('\t' or ' ').
   Zero terminators are not printable (therefore false) */
//you can also do true or false;
bool delim_character(char c)
{
     if(c == '\t' || c == ' ')
     {
     	return 1;
     }
     return 0;
}
/*
   return true(non-zero) if c is a non-whitespace
   character (not tab or space).
   Zero terminators are not printable (therefore false) */
bool non_delim_character(char c)
{
   if(delim_character(c))
   {
	return 1;
   }
    return 0;
}

/* Returns a pointer to the first character of the next
   space-separated word*/
char *word_start(char* str)
{
    char hold;
    int i = 0;
 /*  while(*str == ' ' || *str == '\t')// this only checks for white space  to check '\0'
 {}*/
     while(*str == '\0')
     {
	if(s[i] == '\t' || s[i] == ' ')
	{
	  i++;
	}//end if 
	else 
	    break;
     }//en while 
     return str;
}

/* Returns a pointer to the first space character of the zero
terminated string*/
char *end_word(char* str){

}
// counts the number of words or tokens
int count_tokens(char* str){


}
/* Returns a freshly allocated zero-terminated vector of freshly allocated
   space-separated tokens from zero-terminated str.
   For example, tokenize("hello world string") would result in:
     tokens[0] = "hello"
     tokens[1] = "world"
     tokens[2] = "string"
     tokens[3] = 0
*/
char *copy_str(char *inStr, short len){

}

char** tokenize(char* str){
}


void print_all_tokens(char** tokens){
// char* new_String = (char*)malloc(*sizeof(char))
}
int main()
{
	char test =  'a';
	char test2 = '\t';
	char test3 = ' ';
	printf("test a -->%d\n",delim_character(test));
	printf("test2 t -->%d\n",delim_character(test2));
	printf("test3 whitespace -->%d\n",delim_character(test3));
	char* test_P = word_start("Hello World ");

	return 0;
}
